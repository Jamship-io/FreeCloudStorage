// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// model Post {
//     id        Int      @id @default(autoincrement())
//     name      String
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     createdBy   User   @relation(fields: [createdById], references: [id])
//     createdById String

//     @@index([name])
// }

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

// NEED TO CHANGE PRISMA = NEW PRIMSA

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    // folders       Folder[]
    files         File[]
    sessions      Session[]
}

// model Folder {
//     id           String   @id @default(cuid())
//     userId       String
//     user         User     @relation(fields: [userId], references: [id])
//     folder_name  String
//     total_size   Int
//     date_created DateTime
//     files        File[]
// }

model File {
  id        String   @id @default(cuid())
  file_name String
  file_size Int
  file_type String
  date      DateTime? @default(now())
  chunks    Chunk[]  @relation("FileToChunks")
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Chunk {
  id         String @id @default(cuid())
  file_id     String
  file       File   @relation("FileToChunks", fields: [file_id], references: [id])
  chunk_name String
  chunk_size Int
  message_id String
}


model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

